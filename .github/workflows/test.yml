name: Tests & Coverage

on:
    pull_request:
        branches:
            - main
            - develop
        paths:
            - '**.php'
            - 'composer.json'
            - 'composer.lock'
            - 'phpunit.xml'
            - 'tests/**'
    push:
        paths:
            - '**.php'
            - 'composer.json'
            - 'composer.lock'
            - 'phpunit.xml'
            - 'tests/**'
            - '.github/workflows/test.yml'
    workflow_dispatch: # Enable manual triggering

# Cancel in-progress runs when a new workflow with the same group is triggered
concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    unit-tests:
        name: Unit Tests (PHP ${{ matrix.php }})
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                php: ['8.0', '8.1', '8.2', '8.3']

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup PHP with PCOV
              uses: shivammathur/setup-php@v2
              with:
                  php-version: ${{ matrix.php }}
                  extensions: mbstring, xml, ctype, json, pcov
                  coverage: pcov
                  tools: composer:v2

            - name: Get Composer cache directory
              id: composer-cache
              run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

            - name: Cache Composer dependencies
              uses: actions/cache@v4
              with:
                  path: ${{ steps.composer-cache.outputs.dir }}
                  key: ${{ runner.os }}-php${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-php${{ matrix.php }}-composer-

            - name: Install Composer dependencies
              run: |
                  composer install --prefer-dist --no-progress --no-interaction
                  composer dump-autoload --optimize

            - name: Run unit tests
              if: matrix.php != '8.3'
              run: php plugin/vendor/bin/phpunit --testsuite=unit --testdox --colors=always

            - name: Run unit tests with coverage (PHP 8.3 only)
              if: matrix.php == '8.3'
              run: |
                  php -dpcov.enabled=1 -dpcov.directory=. plugin/vendor/bin/phpunit --testsuite=unit --coverage-clover coverage.xml --coverage-text --testdox --colors=always
                  echo "Coverage file generated:"
                  ls -lh coverage.xml
                  echo "Coverage XML preview:"
                  head -30 coverage.xml

            - name: Upload coverage to Codecov
              if: matrix.php == '8.3'
              uses: codecov/codecov-action@v4
              with:
                  files: ./coverage.xml
                  flags: unit
                  name: unit-tests-php-8.3
                  fail_ci_if_error: true
                  verbose: true
                  token: ${{ secrets.CODECOV_TOKEN }}
                  root_dir: ${{ github.workspace }}
                  working-directory: ${{ github.workspace }}

    coverage-report:
        name: Coverage Report & Badges
        runs-on: ubuntu-latest
        needs: unit-tests
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup PHP with PCOV
              uses: shivammathur/setup-php@v2
              with:
                  php-version: '8.3'
                  extensions: mbstring, xml, ctype, json, pcov
                  coverage: pcov
                  tools: composer:v2

            - name: Install Composer dependencies
              run: |
                  composer install --prefer-dist --no-progress --no-interaction
                  composer dump-autoload --optimize

            - name: Generate coverage report
              run: php plugin/vendor/bin/phpunit --testsuite=unit --coverage-clover coverage.xml --coverage-text | tee coverage-output.txt

            - name: Extract coverage percentage
              id: coverage
              run: |
                  # Debug: Check if coverage.xml exists
                  if [ ! -f "coverage.xml" ]; then
                    echo "ERROR: coverage.xml not found!"
                    ls -la
                    exit 1
                  fi

                  # Debug: Show first few lines of coverage.xml
                  echo "Coverage XML structure:"
                  head -20 coverage.xml

                  # Extract coverage from clover XML using php to parse metrics
                  COVERAGE=$(php -r '
                    $xml = simplexml_load_file("coverage.xml");
                    if (!$xml) {
                      echo "0.0";
                      exit;
                    }
                    $metrics = $xml->project->metrics;
                    $total = (int)$metrics["statements"];
                    $covered = (int)$metrics["coveredstatements"];

                    // Debug output
                    error_log("Total statements: " . $total);
                    error_log("Covered statements: " . $covered);

                    if ($total > 0) {
                      echo number_format(($covered / $total) * 100, 1);
                    } else {
                      echo "0.0";
                    }
                  ')

                  echo "Extracted coverage: $COVERAGE%"
                  echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT

            - name: Create coverage badge
              uses: schneegans/dynamic-badges-action@v1.7.0
              continue-on-error: true # Don't fail if gist isn't configured
              with:
                  auth: ${{ secrets.GIST_SECRET }}
                  gistID: ${{ secrets.GIST_ID }}
                  filename: notion-wp-coverage.json
                  label: coverage
                  message: ${{ steps.coverage.outputs.percentage }}%
                  valColorRange: ${{ steps.coverage.outputs.percentage }}
                  maxColorRange: 90
                  minColorRange: 50

    test-summary:
        name: Test Summary
        runs-on: ubuntu-latest
        needs: [unit-tests]
        if: always()

        steps:
            - name: Check test results
              run: |
                  if [ "${{ needs.unit-tests.result }}" == "failure" ]; then
                    echo "❌ Tests failed"
                    exit 1
                  elif [ "${{ needs.unit-tests.result }}" == "cancelled" ]; then
                    echo "⚠️  Tests were cancelled"
                    exit 1
                  else
                    echo "✅ All tests passed"
                  fi
