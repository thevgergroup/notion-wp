<?xml version="1.0"?>
<ruleset name="Notion-WP Plugin Coding Standards">
	<description>WordPress Coding Standards for Notion-WP Plugin</description>

	<!-- What to scan -->
	<file>./plugin</file>
	<file>./tests</file>

	<!-- Exclude patterns -->
	<exclude-pattern>*/vendor/*</exclude-pattern>
	<exclude-pattern>*/node_modules/*</exclude-pattern>
	<exclude-pattern>*/build/*</exclude-pattern>
	<exclude-pattern>*/dist/*</exclude-pattern>
	<exclude-pattern>*.min.js</exclude-pattern>
	<exclude-pattern>*.asset.php</exclude-pattern>
	<!-- Exclude example/sample files -->
	<exclude-pattern>*/ENQUEUE-SNIPPET.php</exclude-pattern>
	<exclude-pattern>*/settings-sample.php</exclude-pattern>

	<!-- How to scan -->
	<arg value="sp"/> <!-- Show sniff and progress -->
	<arg name="basepath" value="./"/> <!-- Strip the file paths down to the relevant bit -->
	<arg name="colors"/>
	<arg name="extensions" value="php"/>
	<arg name="parallel" value="8"/> <!-- Enables parallel processing when available for faster checks -->

	<!-- Rules: Check PHP version compatibility -->
	<config name="testVersion" value="8.0-"/>

	<!-- Rules: WordPress Coding Standards -->
	<!-- https://github.com/WordPress/WordPress-Coding-Standards -->
	<!-- Note: This project uses PSR-4 autoloading, so some WordPress naming conventions are excluded -->
	<rule ref="WordPress-Core">
		<!-- Allow short array syntax [] instead of array() -->
		<exclude name="Generic.Arrays.DisallowShortArraySyntax"/>
		<exclude name="Universal.Arrays.DisallowShortArraySyntax"/>
		<!-- Exclude file naming rules - we use PSR-4 autoloading -->
		<exclude name="WordPress.Files.FileName.InvalidClassFileName"/>
		<exclude name="WordPress.Files.FileName.NotHyphenatedLowercase"/>
	</rule>

	<rule ref="WordPress-Docs"/>

	<rule ref="WordPress-Extra">
		<!-- We prefer short array syntax -->
		<exclude name="Universal.Arrays.DisallowShortArraySyntax"/>
	</rule>

	<!-- Enforce PSR-4 autoloading standard for class files -->
	<rule ref="PSR1.Classes.ClassDeclaration"/>

	<!-- Check for PHP cross-version compatibility -->
	<rule ref="PHPCompatibility">
		<!-- WordPress minimum is PHP 7.4, we're targeting 8.0+ -->
		<exclude name="PHPCompatibility.FunctionUse.ArgumentFunctionsReportCurrentValue"/>
	</rule>

	<!-- File Size Limit: Maximum 500 lines per file -->
	<!-- This is a CRITICAL requirement from principles.md -->
	<rule ref="Generic.Files.LineLength">
		<properties>
			<!-- Soft limit for line length -->
			<property name="lineLimit" value="120"/>
			<!-- Hard limit for line length -->
			<property name="absoluteLineLimit" value="150"/>
		</properties>
	</rule>

	<!-- Note: File size limit (500 lines) is enforced by GitHub Actions workflow -->
	<!-- The Generic.Files.LineCount sniff is not available in PHPCS, so we use a separate check -->

	<!-- Additional strict rules for code quality -->
	<rule ref="Generic.CodeAnalysis.EmptyStatement"/>
	<rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
	<rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
	<rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>
	<rule ref="Generic.Commenting.Todo"/>
	<rule ref="Generic.Commenting.Fixme"/>

	<!-- Disable overly strict inline comment punctuation rule -->
	<!-- While proper punctuation is good practice, enforcing it creates busywork without improving code quality -->
	<rule ref="Squiz.Commenting.InlineComment.InvalidEndChar">
		<severity>0</severity>
	</rule>

	<!-- Disable cosmetic alignment rules - all auto-fixable with phpcbf -->
	<!-- These create noise without improving code quality and can be fixed in batch later -->
	<rule ref="Generic.Formatting.MultipleStatementAlignment">
		<severity>0</severity>
	</rule>
	<rule ref="WordPress.Arrays.MultipleStatementAlignment">
		<severity>0</severity>
	</rule>

	<!-- Disable strict translation literal check - allows variables in translation functions -->
	<!-- This is needed for dynamic message construction while maintaining i18n support -->
	<rule ref="WordPress.WP.I18n.NonSingularStringLiteralText">
		<severity>0</severity>
	</rule>

	<!-- WordPress-specific adjustments -->
	<rule ref="WordPress.WP.I18n">
		<properties>
			<!-- Set your plugin text domain -->
			<property name="text_domain" type="array">
				<element value="notion-wp"/>
			</property>
		</properties>
	</rule>

	<!-- Verify WordPress minimum version compatibility -->
	<rule ref="WordPress.WP.DeprecatedFunctions">
		<properties>
			<property name="minimum_wp_version" value="6.0"/>
		</properties>
	</rule>

	<!-- Enforce nonce verification for forms -->
	<rule ref="WordPress.Security.NonceVerification"/>

	<!-- Enforce sanitization and escaping -->
	<rule ref="WordPress.Security.ValidatedSanitizedInput"/>
	<rule ref="WordPress.Security.EscapeOutput"/>

	<!-- Database queries must be prepared -->
	<rule ref="WordPress.DB.PreparedSQL"/>
	<rule ref="WordPress.DB.DirectDatabaseQuery"/>

	<!-- Disallow dangerous functions -->
	<rule ref="WordPress.PHP.DiscouragedPHPFunctions"/>
	<rule ref="WordPress.WP.AlternativeFunctions"/>

	<!-- Naming conventions -->
	<!-- Note: Allow both PSR-4 namespace (NotionSync) and WordPress-style prefixes (notion_wp, notion_sync) -->
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals">
		<properties>
			<property name="prefixes" type="array">
				<element value="notion_wp"/>
				<element value="NOTION_WP"/>
				<element value="notion_sync"/>
				<element value="NOTION_SYNC"/>
				<element value="NotionSync"/>
			</property>
		</properties>
	</rule>

	<!-- Allow modern PHP features -->
	<rule ref="PSR12.Properties.ConstantVisibility"/>
	<rule ref="PSR12.Classes.ClassInstantiation"/>

	<!-- Performance: Disallow slow functions in loops -->
	<rule ref="Squiz.PHP.DisallowMultipleAssignments"/>
</ruleset>
